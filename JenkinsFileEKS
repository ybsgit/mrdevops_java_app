
pipeline{

agent any 

parameters{
    choice(name: 'EKS', choices: ['create', 'destroy'], description: 'Pick something')
}
stages{
    stage('Create ECR'){
        when{ 
          expression{ params.EKS == 'create'}   
        }
       agent{
        docker{
          image "hashicorp/terraform"
          reuseNode true 
          args  '--entrypoint=""'
       }
       }
       steps{
        withCredentials([usernamePassword(credentialsId: 'aws-cred-01', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {

                        sh """
                        ls -la
                        cd eks_module 
                        terraform init 
                        terraform plan --var-file=config/terraform.tfvars 
                        terraform apply --var-file=config/terraform.tfvars --auto-approve
                        """
       }
       }
    }
    stage("Update EKS Cluster Credentials"){
                when{ 
          expression{ params.EKS == 'create'}   
        }
        steps{
        withCredentials([usernamePassword(credentialsId: 'aws-cred-01', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
            sh """
            aws eks update-kubeconfig --region us-east-1 --name "demo-cluster1"
            kubectl get pods 
            """
        }
        }
    }
    stage('destroy EKS')
    {
        when{ 
          expression{ params.EKS == 'destroy'}   
        }
               agent{
        docker{
          image "hashicorp/terraform"
          reuseNode true 
          args  '--entrypoint=""'
       }
       }

       steps{
        withCredentials([usernamePassword(credentialsId: 'aws-cred-01', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {

                        sh """
                        ls -la
                        cd eks_module 
                         terraform init 
                        terraform destroy --var-file=config/terraform.tfvars --auto-approve
                        """
       }
       }
    }
}
}